// src/ai/flows/curate-philosophical-question.ts
'use server';
/**
 * @fileOverview This file defines a Genkit flow for curating philosophical questions related to gaming behavior.
 *
 * - curatePhilosophicalQuestion - A function that curates a philosophical question using the Gemini API.
 * - CuratePhilosophicalQuestionInput - The input type for the curatePhilosophicalQuestion function.
 * - CuratePhilosophicalQuestionOutput - The return type for the curatePhilosophicalQuestion function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CuratePhilosophicalQuestionInputSchema = z.object({
  question: z.string().describe('A philosophical question generated by the Gemini API.'),
});
export type CuratePhilosophicalQuestionInput = z.infer<typeof CuratePhilosophicalQuestionInputSchema>;

const CuratePhilosophicalQuestionOutputSchema = z.object({
  curatedQuestion: z.string().describe('A curated philosophical question that provokes contemplation on gaming behavior.'),
  isValid: z.boolean().describe('Whether the question is valid or not')
});
export type CuratePhilosophicalQuestionOutput = z.infer<typeof CuratePhilosophicalQuestionOutputSchema>;

export async function curatePhilosophicalQuestion(input: CuratePhilosophicalQuestionInput): Promise<CuratePhilosophicalQuestionOutput> {
  return curatePhilosophicalQuestionFlow(input);
}

const questionFilterTool = ai.defineTool(
  {
    name: 'isGamingRelated',
    description: 'Check if a question is related to gaming behavior.',
    inputSchema: z.object({
      question: z.string().describe('The question to check.'),
    }),
    outputSchema: z.boolean(),
  },
  async (input) => {
    // Implement logic to determine if the question is related to gaming behavior.
    // This could involve keyword analysis or connecting to a database of gaming-related topics.
    const gamingKeywords = ['game', 'gaming', 'player', 'play', 'score', 'idle', 'clicker', 'virtual', 'online'];
    const questionLower = input.question.toLowerCase();
    const isRelated = gamingKeywords.some(keyword => questionLower.includes(keyword));
    return isRelated;
  }
);

const curatePhilosophicalQuestionPrompt = ai.definePrompt({
  name: 'curatePhilosophicalQuestionPrompt',
  input: {schema: CuratePhilosophicalQuestionInputSchema},
  output: {schema: CuratePhilosophicalQuestionOutputSchema},
  tools: [questionFilterTool],
  system: `You are an AI assistant designed to curate philosophical questions related to gaming behavior.
  Your primary goal is to ensure that the questions provoke contemplation on the player's engagement with the game.
  Use the questionFilterTool to check if the question is gaming related. If it is then just repeat it back, if not, return an error.`,
  prompt: `Here is the question to curate: {{{question}}}`,
});

const curatePhilosophicalQuestionFlow = ai.defineFlow(
  {
    name: 'curatePhilosophicalQuestionFlow',
    inputSchema: CuratePhilosophicalQuestionInputSchema,
    outputSchema: CuratePhilosophicalQuestionOutputSchema,
  },
  async input => {
    const {output} = await curatePhilosophicalQuestionPrompt(input);
    return output!;
  }
);
